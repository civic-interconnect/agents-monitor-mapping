{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Civic Interconnect Project Documentation","text":"<p>Welcome to the documentation for Civic Interconnect (CI) projects.</p> <p>Use the navigation menu to explore available modules, APIs, and tools.</p> <p>For more information, visit the Civic Interconnect GitHub organization.</p>"},{"location":"api/cli.cli/","title":"Module <code>cli.cli</code>","text":""},{"location":"api/cli.cli/#functions","title":"Functions","text":""},{"location":"api/cli.cli/#hello","title":"<code>hello()</code>","text":"<p>Say hello for debug purposes.</p>"},{"location":"api/cli.cli/#start","title":"<code>start()</code>","text":"<p>Run the bill monitoring agent.</p>"},{"location":"api/main/","title":"Module <code>main</code>","text":""},{"location":"api/main/#classes","title":"Classes","text":""},{"location":"api/main/#pathself-args-kwargs","title":"<code>Path(self, *args, **kwargs)</code>","text":"<p>PurePath subclass that can make system calls.</p> <p>Path represents a filesystem path but unlike PurePath, also offers methods to do system calls on path objects. Depending on your system, instantiating a Path will return either a PosixPath or a WindowsPath object. You can also instantiate a PosixPath or WindowsPath directly, but cannot instantiate a WindowsPath on a POSIX system or vice versa.</p>"},{"location":"api/main/#functions","title":"Functions","text":""},{"location":"api/main/#ensure_dirpath-str-pathlibpath-pathlibpath","title":"<code>ensure_dir(path: str | pathlib.Path) -&gt; pathlib.Path</code>","text":"<p>Ensure a directory exists, creating it if necessary.</p> <p>Args:     path (str | Path): The directory path to ensure.</p> <p>Returns:     Path: The resolved Path object of the directory.</p> <p>Raises:     OSError: If directory cannot be created.</p>"},{"location":"api/main/#load_dotenvdotenv_path-unionstr-forwardrefospathlikestr-nonetype-none-stream-optionaliostr-none-verbose-bool-false-override-bool-false-interpolate-bool-true-encoding-optionalstr-utf-8-bool","title":"<code>load_dotenv(dotenv_path: Union[str, ForwardRef('os.PathLike[str]'), NoneType] = None, stream: Optional[IO[str]] = None, verbose: bool = False, override: bool = False, interpolate: bool = True, encoding: Optional[str] = 'utf-8') -&gt; bool</code>","text":"<p>Parse a .env file and then load all the variables found as environment variables.</p> <p>Parameters:     dotenv_path: Absolute or relative path to .env file.     stream: Text stream (such as <code>io.StringIO</code>) with .env content, used if         <code>dotenv_path</code> is <code>None</code>.     verbose: Whether to output a warning the .env file is missing.     override: Whether to override the system environment variables with the variables         from the <code>.env</code> file.     encoding: Encoding to be used to read the file. Returns:     Bool: True if at least one environment variable is set else False</p> <p>If both <code>dotenv_path</code> and <code>stream</code> are <code>None</code>, <code>find_dotenv()</code> is used to find the .env file with it's default parameters. If you need to change the default parameters of <code>find_dotenv()</code>, you can explicitly call <code>find_dotenv()</code> and pass the result to this function as <code>dotenv_path</code>.</p>"},{"location":"api/main/#main","title":"<code>main()</code>","text":"<p>Main function to run the mapping agent. Expects config.yaml to include: - storage_path - report_path - ocd_repo_url</p>"},{"location":"api/main/#today_utc_str-str","title":"<code>today_utc_str() -&gt; str</code>","text":"<p>Return today's date in UTC in 'YYYY-MM-DD' format.</p> <p>Returns:     str: Current UTC date as a string.</p>"},{"location":"api/main/#write_yamldata-dictstr-typingany-path-str-pathlibpath-pathlibpath","title":"<code>write_yaml(data: dict[str, typing.Any], path: str | pathlib.Path) -&gt; pathlib.Path</code>","text":"<p>Write a dictionary to a YAML file.</p> <p>Args:     data (dict): Data to write.     path (str | Path): File path to write to.</p> <p>Returns:     Path: The path the file was written to.</p>"},{"location":"api/parsers.ocd_county_extractor/","title":"Module <code>parsers.ocd_county_extractor</code>","text":""},{"location":"api/parsers.ocd_county_extractor/#classes","title":"Classes","text":""},{"location":"api/parsers.ocd_county_extractor/#pathself-args-kwargs","title":"<code>Path(self, *args, **kwargs)</code>","text":"<p>PurePath subclass that can make system calls.</p> <p>Path represents a filesystem path but unlike PurePath, also offers methods to do system calls on path objects. Depending on your system, instantiating a Path will return either a PosixPath or a WindowsPath object. You can also instantiate a PosixPath or WindowsPath directly, but cannot instantiate a WindowsPath on a POSIX system or vice versa.</p>"},{"location":"api/parsers.ocd_county_extractor/#functions","title":"Functions","text":""},{"location":"api/parsers.ocd_county_extractor/#extract_countiesstorage_path-str-pathlibpath-config-dict-pandascoreframedataframe","title":"<code>extract_counties(storage_path: str | pathlib.Path, config: dict) -&gt; pandas.core.frame.DataFrame</code>","text":"<p>Extract county-level OCD identifiers and build a scaffold DataFrame.</p> <p>Args:     storage_path (str | Path): Root path to today's storage folder.     config (dict): Config dictionary (unused but accepted for consistency).</p> <p>Returns:     pd.DataFrame: County scaffold with ocd_id, state, county_slug, and empty OpenStates column.</p>"},{"location":"api/parsers.ocd_county_extractor/#extract_county_slugocd_id-str-str","title":"<code>extract_county_slug(ocd_id: str) -&gt; str</code>","text":"<p>Extract the county slug (lowercase, underscore form) from an OCD division ID.</p> <p>Example:     'ocd-division/country:us/state:mn/county:st_louis' -&gt; 'st_louis'</p>"},{"location":"api/parsers.ocd_county_extractor/#extract_state_codeocd_id-str-str","title":"<code>extract_state_code(ocd_id: str) -&gt; str</code>","text":"<p>Extract the state code from an OCD division ID.</p> <p>Example:     'ocd-division/country:us/state:mn/county:st_louis' -&gt; 'mn'</p>"},{"location":"api/parsers.ocd_parser/","title":"Module <code>parsers.ocd_parser</code>","text":""},{"location":"api/parsers.ocd_parser/#classes","title":"Classes","text":""},{"location":"api/parsers.ocd_parser/#pathself-args-kwargs","title":"<code>Path(self, *args, **kwargs)</code>","text":"<p>PurePath subclass that can make system calls.</p> <p>Path represents a filesystem path but unlike PurePath, also offers methods to do system calls on path objects. Depending on your system, instantiating a Path will return either a PosixPath or a WindowsPath object. You can also instantiate a PosixPath or WindowsPath directly, but cannot instantiate a WindowsPath on a POSIX system or vice versa.</p>"},{"location":"api/parsers.ocd_parser/#functions","title":"Functions","text":""},{"location":"api/parsers.ocd_parser/#ensure_dirpath-str-pathlibpath-pathlibpath","title":"<code>ensure_dir(path: str | pathlib.Path) -&gt; pathlib.Path</code>","text":"<p>Ensure a directory exists, creating it if necessary.</p> <p>Args:     path (str | Path): The directory path to ensure.</p> <p>Returns:     Path: The resolved Path object of the directory.</p> <p>Raises:     OSError: If directory cannot be created.</p>"},{"location":"api/parsers.ocd_parser/#runstorage_path-str-pathlibpath-config-dict-str","title":"<code>run(storage_path: str | pathlib.Path, config: dict) -&gt; str</code>","text":"<p>Clone or update the OCD Divisions repository.</p> <p>Args:     storage_path (str | Path): Local storage path for this polling run.     config (dict): Loaded configuration containing 'ocd_repo_url'.</p> <p>Returns:     str: Status message confirming repository update.</p>"}]}
